Here are the 4 commandments for the style guide for all c code on the deadbird
compiler collection.

Commandment I.
    All variables on the stack must be declared at the very beginning of the
    stack frame. For example, the following snippet would comply with this
    rule:
    
    void foo(char* buff)
    {
        int i;
        char* cur;

        for(i=0, cur=buff; i<strlen(buff); i++, cur++)
            printf("%c\n", *cur);
    }

    While the following would not:

    void foo(char* buff)
    {
        for(int i=0, char* cur=buff; i<strlen(buff); i++, cur++)
            printf("%c\n", *cur);
    }

    This commandment is in place because it makes stack corruption much simpler
    to debug.

Commandment II.
    All functions without input parameters should be declared with a void as
    the single parameters in declaration, but not calling. For example, this
    would be allowed:

    void foo(void);
    foo();

    But not this:
    void foo();
    foo();

Commandment III.
    Indentation should be done with 4 spaces, not tabs.

Commandment IV.
    Curly braces should always be put on the new line unless defining an empty
    scope. For example These both would be allowed:

    void foo(void)
    {
        // Stuff
    }
    void doesnothing(void) {}

    But this would be disallowed:
    
    void foo(void) {
        // Stuff
    }

If a programmer does not comply with these rules, they should be either hung or
burned at the stake in town square depending on the severity of their
violations.

