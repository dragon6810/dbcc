#ifndef _lexer_terminationtable_h
#define _lexer_terminationtable_h

#include <frontend/lexer/lexer.h>

// A table of what next token(s) to expect after every
// token.
lexer_tokentype_e terminationtable[][LEXER_TOKENTYPE_ENDOFENUM-LEXER_TOKENTYPE_STARTOFENUM+1] =
{
    // LEXER_TOKENTYPE_EOF
    {
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_OPENBRACKET
    {
        LEXER_TOKENTYPE_CLOSEBRACKET,
        LEXER_TOKENTYPE_OPENPARENTH,
        LEXER_TOKENTYPE_OPENBRACE,
        LEXER_TOKENTYPE_POINTER,
        LEXER_TOKENTYPE_AMPERSAND,
        LEXER_TOKENTYPE_NOT,
        LEXER_TOKENTYPE_UNARYPLUS,
        LEXER_TOKENTYPE_UNARYMINUS,
        LEXER_TOKENTYPE_INCREMENT,
        LEXER_TOKENTYPE_DECREMENT,
        LEXER_TOKENTYPE_BITNOT,
        LEXER_TOKENTYPE_IDENTIFIER,
        LEXER_TOKENTYPE_CONSTANT,
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_CLOSEBRACKET
    {
        LEXER_TOKENTYPE_OPENBRACKET,
        LEXER_TOKENTYPE_CLOSEPARENTH,
        LEXER_TOKENTYPE_CLOSEBRACE,
        LEXER_TOKENTYPE_COMMA,
        LEXER_TOKENTYPE_COLON,
        LEXER_TOKENTYPE_SEMICOLON,
        LEXER_TOKENTYPE_ASSIGN,
        LEXER_TOKENTYPE_NOTEQUAL,
        LEXER_TOKENTYPE_EQUAL,
        LEXER_TOKENTYPE_AND,
        LEXER_TOKENTYPE_OR,
        LEXER_TOKENTYPE_GREATER,
        LEXER_TOKENTYPE_LESS,
        LEXER_TOKENTYPE_GE,
        LEXER_TOKENTYPE_LE,
        LEXER_TOKENTYPE_THEN,
        LEXER_TOKENTYPE_PERIOD,
        LEXER_TOKENTYPE_PLUS,
        LEXER_TOKENTYPE_MINUS,
        LEXER_TOKENTYPE_MULT,
        LEXER_TOKENTYPE_DIV,
        LEXER_TOKENTYPE_MOD,
        LEXER_TOKENTYPE_INCREMENT,
        LEXER_TOKENTYPE_DECREMENT,
        LEXER_TOKENTYPE_PLUSEQUALS,
        LEXER_TOKENTYPE_MINUSEQUALS,
        LEXER_TOKENTYPE_MULTEQUALS,
        LEXER_TOKENTYPE_DIVEQUALS,
        LEXER_TOKENTYPE_MODEQUALS,
        LEXER_TOKENTYPE_BITSHIFTL,
        LEXER_TOKENTYPE_BITSHIFTR,
        LEXER_TOKENTYPE_BITAND,
        LEXER_TOKENTYPE_BITOR,
        LEXER_TOKENTYPE_BITNOT,
        LEXER_TOKENTYPE_BITSHIFTLEQ,
        LEXER_TOKENTYPE_BITSHIFTREQ,
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_OPENPARENTH
    {
        LEXER_TOKENTYPE_CLOSEPARENTH,
        LEXER_TOKENTYPE_OPENBRACE,
        LEXER_TOKENTYPE_SEMICOLON,
        LEXER_TOKENTYPE_POINTER,
        LEXER_TOKENTYPE_AMPERSAND,
        LEXER_TOKENTYPE_NOT,
        LEXER_TOKENTYPE_AUTO,
        LEXER_TOKENTYPE_CHAR,
        LEXER_TOKENTYPE_CONST,
        LEXER_TOKENTYPE_ENUM,
        LEXER_TOKENTYPE_FLOAT,
        LEXER_TOKENTYPE_INT,
        LEXER_TOKENTYPE_LONG,
        LEXER_TOKENTYPE_REGISTER,
        LEXER_TOKENTYPE_SHORT,
        LEXER_TOKENTYPE_SIGNED,
        LEXER_TOKENTYPE_STRUCT,
        LEXER_TOKENTYPE_UNSIGNED,
        LEXER_TOKENTYPE_VOID,
        LEXER_TOKENTYPE_VOLATILE,
        LEXER_TOKENTYPE_STRING,
        LEXER_TOKENTYPE_UNARYPLUS,
        LEXER_TOKENTYPE_UNARYMINUS,
        LEXER_TOKENTYPE_INCREMENT,
        LEXER_TOKENTYPE_DECREMENT,
        LEXER_TOKENTYPE_BITNOT,
        LEXER_TOKENTYPE_IDENTIFIER,
        LEXER_TOKENTYPE_CONSTANT,
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_CLOSEPARENTH
    {
        LEXER_TOKENTYPE_OPENBRACKET,
        LEXER_TOKENTYPE_CLOSEPARENTH,
        LEXER_TOKENTYPE_CLOSEBRACE,
        LEXER_TOKENTYPE_COMMA,
        LEXER_TOKENTYPE_COLON,
        LEXER_TOKENTYPE_SEMICOLON,
        LEXER_TOKENTYPE_ASSIGN,
        LEXER_TOKENTYPE_NOTEQUAL,
        LEXER_TOKENTYPE_EQUAL,
        LEXER_TOKENTYPE_AND,
        LEXER_TOKENTYPE_OR,
        LEXER_TOKENTYPE_GREATER,
        LEXER_TOKENTYPE_LESS,
        LEXER_TOKENTYPE_GE,
        LEXER_TOKENTYPE_LE,
        LEXER_TOKENTYPE_THEN,
        LEXER_TOKENTYPE_PERIOD,
        LEXER_TOKENTYPE_PLUS,
        LEXER_TOKENTYPE_MINUS,
        LEXER_TOKENTYPE_MULT,
        LEXER_TOKENTYPE_DIV,
        LEXER_TOKENTYPE_MOD,
        LEXER_TOKENTYPE_INCREMENT,
        LEXER_TOKENTYPE_DECREMENT,
        LEXER_TOKENTYPE_PLUSEQUALS,
        LEXER_TOKENTYPE_MINUSEQUALS,
        LEXER_TOKENTYPE_MULTEQUALS,
        LEXER_TOKENTYPE_DIVEQUALS,
        LEXER_TOKENTYPE_MODEQUALS,
        LEXER_TOKENTYPE_BITSHIFTL,
        LEXER_TOKENTYPE_BITSHIFTR,
        LEXER_TOKENTYPE_BITAND,
        LEXER_TOKENTYPE_BITOR,
        LEXER_TOKENTYPE_BITNOT,
        LEXER_TOKENTYPE_BITSHIFTLEQ,
        LEXER_TOKENTYPE_BITSHIFTREQ,
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_OPENBRACE
    {
        LEXER_TOKENTYPE_OPENPARENTH,
        LEXER_TOKENTYPE_CLOSEBRACE,
        LEXER_TOKENTYPE_POINTER,
        LEXER_TOKENTYPE_AMPERSAND,
        LEXER_TOKENTYPE_NOT,
        LEXER_TOKENTYPE_PERIOD,
        LEXER_TOKENTYPE_AUTO,
        LEXER_TOKENTYPE_BREAK,
        LEXER_TOKENTYPE_CASE,
        LEXER_TOKENTYPE_CHAR,
        LEXER_TOKENTYPE_CONST,
        LEXER_TOKENTYPE_CONTINUE,
        LEXER_TOKENTYPE_DEFAULT,
        LEXER_TOKENTYPE_DOUBLE,
        LEXER_TOKENTYPE_ENUM,
        LEXER_TOKENTYPE_FLOAT,
        LEXER_TOKENTYPE_GOTO,
        LEXER_TOKENTYPE_IF,
        LEXER_TOKENTYPE_INT,
        LEXER_TOKENTYPE_LONG,
        LEXER_TOKENTYPE_REGISTER,
        LEXER_TOKENTYPE_RETURN,
        LEXER_TOKENTYPE_SHORT,
        LEXER_TOKENTYPE_SIGNED,
        LEXER_TOKENTYPE_STRUCT,
        LEXER_TOKENTYPE_SWITCH,
        LEXER_TOKENTYPE_TYPEDEF,
        LEXER_TOKENTYPE_UNION,
        LEXER_TOKENTYPE_UNSIGNED,
        LEXER_TOKENTYPE_VOLATILE,
        LEXER_TOKENTYPE_WHILE,
        LEXER_TOKENTYPE_UNARYPLUS,
        LEXER_TOKENTYPE_UNARYMINUS,
        LEXER_TOKENTYPE_INCREMENT,
        LEXER_TOKENTYPE_DECREMENT,
        LEXER_TOKENTYPE_BITNOT,
        LEXER_TOKENTYPE_IDENTIFIER,
        LEXER_TOKENTYPE_CONSTANT,
        LEXER_TOKENTYPE_INVALID,
    },
    // LEXER_TOKENTYPE_CLOSEBRACE
    {
        
        LEXER_TOKENTYPE_INVALID,
    },
};

#endif